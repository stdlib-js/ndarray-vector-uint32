{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { factory as factory } from '@stdlib/ndarray-vector-ctor';\n\n\n// MAIN //\n\n/**\n* Returns an unsigned 32-bit integer vector (i.e., a one-dimensional ndarray).\n*\n* @name Uint32Vector\n* @type {Function}\n* @param {(NonNegativeInteger|Collection|ArrayBuffer|Iterable)} [arg] - length, typed array, array-like object, buffer, or iterable\n* @param {NonNegativeInteger} [byteOffset=0] - byte offset\n* @param {NonNegativeInteger} [length] - view length\n* @param {Options} [options] - function options\n* @param {boolean} [options.readonly=false] - boolean indicating whether to return a read-only vector\n* @param {string} [options.mode='throw'] - specifies how to handle indices which exceed vector dimensions\n* @param {string} [options.order='row-major'] - memory layout (either row-major or column-major)\n* @throws {TypeError} first argument must be either a length, typed array, array-like object, buffer, iterable, or options object\n* @throws {TypeError} must provide valid options\n* @returns {ndarray} one-dimensional ndarray\n*\n* @example\n* import numel from '@stdlib/ndarray-numel';\n*\n* var arr = new Uint32Vector();\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 0\n*\n* @example\n* import numel from '@stdlib/ndarray-numel';\n*\n* var arr = new Uint32Vector( 2 );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 2\n*\n* @example\n* import numel from '@stdlib/ndarray-numel';\n*\n* var arr = new Uint32Vector( [ 1, 2 ] );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 2\n*\n* @example\n* import numel from '@stdlib/ndarray-numel';\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Uint32Vector( buf );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 8\n*\n* @example\n* import numel from '@stdlib/ndarray-numel';\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 32 );\n* var arr = new Uint32Vector( buf, 16 );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 4\n*\n* @example\n* import numel from '@stdlib/ndarray-numel';\n* import ArrayBuffer from '@stdlib/array-buffer';\n*\n* var buf = new ArrayBuffer( 64 );\n* var arr = new Uint32Vector( buf, 16, 2 );\n* // returns <ndarray>\n*\n* var len = numel( arr );\n* // returns 2\n*/\nvar Uint32Vector = factory( 'uint32' );\n\n\n// EXPORTS //\n\nexport default Uint32Vector;\n"],"names":["Uint32Vector","factory"],"mappings":";;kGAuGG,IAACA,EAAeC,EAAS"}